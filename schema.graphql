type AuthPayload {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input CreateUserInput {
  userName: String!
  email: EmailAddress!
  password: String!
}

input LoginInput {
  email: EmailAddress!
  password: String!
}

type LogoutResponse {
  loggedOut: Boolean!
}

type NewTokenResponse {
  accessToken: String!
  refreshToken: String!
}

type Query {
  hello: String!
  findAllBuilds: [Build]
  findOneBuild(recipeName: String!, buildName: String!): Build
  findFolloweddUsersBuildPermission(buildId: String!): [UserBuildPermission]
  ingredients: [Ingredient]!
  ingredient(id: Int!): Ingredient
  getProfile(userId: String): Profile!
  findFolloweddUsersBookPermission(recipeBookId: String!): [UserBookPermission]
  publicBook(name: String): RecipeBook!
  publicBookList: [RecipeBook]!
  publicBooks(skip: Int, take: Int): [RecipeBook]!
  book(name: String): RecipeBook
  userBookList: [RecipeBook]!
  userBooks(skip: Int, take: Int): [RecipeBook]!
  publicRecipe(name: String!): Recipe!
  publicRecipeList: [Recipe]!
  publicRecipes(skip: Int, take: Int): [Recipe]!
  recipe(name: String!): Recipe
  userRecipeList: [Recipe]!
  userRecipes(skip: Int, take: Int): [Recipe]!
  findAllUnits: [Unit]
  findSomeUnits(unitType: String): [Unit]
  allUsers: [User]!
  userById(id: ID!): User
  findFollows: [User]
  findFollowers: [User]
  getUserRelationships: [UserRelation]
}

type Mutation {
  login(loginInput: LoginInput!): AuthPayload!
  signin(loginInput: LoginInput!): AuthPayload!
  googleSignIn(
    googleUserId: String!
    email: String!
    name: String!
    accessToken: String!
    tokenExpiry: DateTime!
    image: String
  ): AuthPayload!
  signup(createUserInput: CreateUserInput!): AuthPayload!
  logout(userId: ID!): LogoutResponse!
  getNewTokens(refreshToken: String): AuthPayload!
  createNewUser(email: String, userName: String): AuthPayload!
  addPasswordAuth(id: String, password: String): AuthPayload!
  addOauthAuth(
    id: String
    provider: String
    providerUserId: String
    accessToken: String
    tokenExpiry: DateTime
  ): AuthPayload!
  createBuild(createBuildInput: CreateBuildInput): Build
  updateBuild(updateBuildInput: UpdateBuildInput): ArchiveResponse
  updateManyBuilds(updateManyBuildInput: [UpdateManyBuildInput]!): StatusMessage
  removeBuild(buildId: String, permission: Permission): Build
  changeBuildPermission(
    changeBuildPermissionInput: ChangeBuildPermissionInput
  ): BuildPermissionResponse
  deleteBuildPermission(
    changeBuildPermissionInput: ChangeBuildPermissionInput
  ): BuildPermissionResponse
  createIngredient(createIngredientInput: CreateIngredientInput!): Ingredient!
  createManyIngredients(
    createManyIngredientInputs: [CreateIngredientInput]!
  ): StatusMessage!
  updateIngredient(updateIngredientInput: UpdateIngredientInput!): Ingredient!
  removeIngredient(id: String!): Ingredient
  updateProfile(image: String): Profile!
  createRecipeBook(name: String!, description: String): RecipeBook!
  updateRecipeBook(
    id: String!
    name: String!
    permission: Permission!
    description: String
  ): RecipeBook!
  removeRecipeBook(id: String!, permission: Permission!): StatusMessage!
  addBuildToRecipeBook(
    recipeBookId: String!
    buildId: String!
    buildPermission: Permission!
    bookPermission: Permission!
  ): StatusMessage!
  removeBuildFromRecipeBook(
    recipeBookId: String!
    buildId: String!
    bookPermission: Permission!
  ): StatusMessage!
  changeRecipeBookPermission(
    userId: String!
    recipeBookId: String!
    userPermission: Permission
    desiredPermission: Permission
  ): RecipeBookShare!
  removeRecipeBookPermission(
    userId: String!
    recipeBookId: String!
    permission: Permission
  ): StatusMessage!
  createManyRecipes(
    createManyRecipeInputs: [CreateRecipeInput]!
  ): StatusMessage!
  createRecipe(createRecipeInput: CreateRecipeInput!): Recipe!
  updateRecipe(updateRecipeInput: UpdateRecipeInput!): Recipe!
  removeRecipe(id: ID!): Recipe
  updateTouch(
    newTouchArray: [TouchInput]
    permission: Permission
    buildId: String
    version: Int
  ): [Touch]
  followUser(followId: String!, relationship: Relationship): StatusMessage
  unFollowUser(unfollowId: String!): StatusMessage
  blockUser(blockId: String!): StatusMessage
  unblockUser(unblockId: String!): StatusMessage
}

type NewUser {
  id: Int!
  email: String!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Build {
  id: ID!
  recipe: Recipe!
  buildName: String!
  createdAt: DateTime
  editedAt: DateTime
  createdBy: User
  createdById: String
  editedBy: User
  instructions: String
  notes: String
  glassware: String
  ice: String
  image: String
  permission: Permission
  touch: [Touch!]!
  version: Int
  archivedBuild: [ArchivedBuild]
}

type BuildConstructor {
  name: String!
  buildName: String!
  about: String
  instructions: String
  ice: String
  image: String
  glassware: String
  isPublic: Boolean
  recipe: RecipeName
  touchArray: [CompleteTouch]!
  id: String!
  permission: Permission!
  newRecipe: Boolean!
}

type RecipeName {
  name: String
}

input CreateBuildInput {
  recipe: RecipeNameInput!
  buildName: String!
  instructions: String
  glassware: String
  ice: String
  image: String
  isPublic: Boolean
  touchArray: [TouchInput]!
}

type ArchivedBuild {
  id: ID!
  buildId: String!
  buildName: String!
  createdAt: DateTime
  createdBy: User
  instructions: String
  notes: String
  glassware: String
  ice: String
  version: Int
  archivedTouch: [ArchivedTouch]
}

type BuildUser {
  user: User!
  build: Build!
  permission: Permission
}

type UserBuildPermission {
  user: User!
  permission: String
}

type ArchiveResponse {
  build: Build
  archivedBuild: ArchivedBuild
}

type BuildPermissionResponse {
  buildUser: BuildUser
  status: StatusMessage
}

input RecipeNameInput {
  name: String!
}

input CreateFirstBuildInput {
  buildName: String!
  instructions: String
  glassware: String
  ice: String
  isPublic: Boolean
  touchArray: [TouchInput]!
}

input UpdateBuildInput {
  recipe: RecipeNameInput!
  buildId: String!
  buildName: String
  instructions: String
  glassware: String
  ice: String
  image: String
  isPublic: Boolean
  touchArray: [TouchInput]!
  permission: Permission
}

input UpdateManyBuildInput {
  name: String!
  about: String
  build: ManyBuildInput!
}

input ManyBuildInput {
  buildId: String
  buildName: String!
  instructions: String
  glassware: String
  ice: String
  touchArray: [TouchInput]!
}

input ChangeBuildPermissionInput {
  userId: String
  buildId: String
  userPermission: Permission
  desiredPermission: Permission
}

enum Relationship {
  Favorite
  Close
  Following
  Blocked
}

enum Permission {
  BLOCKED
  VIEW
  EDIT
  MANAGER
  OWNER
}

type ListItem {
  id: String!
  name: String!
}

type Ingredient {
  id: ID!
  name: String!
  description: String
}

input CreateIngredientInput {
  name: String!
  description: String
}

input UpdateIngredientInput {
  id: ID!
  name: String!
  description: String
}

type Profile {
  id: ID!
  image: String
  user: User
}

input ProfileInput {
  userId: String!
  image: String
}

type RecipeBook {
  id: ID!
  name: String!
  description: String!
  createdAt: DateTime
  createdById: String
  editedAt: DateTime
  createdBy: User
  editedBy: User
  permission: Permission
  userBuild: [Build!]!
  publicBuild: [Build]
}

type RecipeBookUser {
  recipeBook: RecipeBook!
  user: User!
  permission: Permission!
}

type RecipeBookShare {
  recipeBook: RecipeBookUser
  status: StatusMessage
}

type UserBookPermission {
  user: User!
  permission: String
}

type Recipe {
  id: ID!
  createdAt: DateTime
  editedAt: DateTime
  name: String!
  about: String
  createdBy: User
  createdById: String
  editedBy: User
  editeById: String
  publicBuild: [Build]
  userBuild: [Build]
}

input CreateRecipeInput {
  recipeName: String!
  about: String!
  build: CreateFirstBuildInput!
}

input UpdateRecipeInput {
  id: ID!
  name: String!
  about: String!
  build: UpdateBuildInput!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress

type Touch {
  id: ID!
  build: Build
  order: Int!
  amount: Float!

  Unit: Unit!
  version: Int
  ingredient: Ingredient!
  ingredientName: String
}

type ArchivedTouch {
  id: ID!
  archivedBuild: Build
  order: Int
  amount: Float
  Unit: Unit

  version: Int
  ingredient: Ingredient
}

input TouchInput {
  id: String!
  ingredient: IngredientInput!
  amount: Float!
  Unit: UnitInput!
  order: Int
}

input IngredientInput {
  id: String
  name: String!
}

input UnitInput {
  id: String
  abbreviation: String!
}

type CompleteTouch {
  id: String!
  ingredient: Ingredient!
  amount: Float!
  Unit: Unit!
  order: Int
}

type Unit {
  id: ID!
  abbreviation: String!
  name: String
  conversions: Float
  conversionTo: UnitConversion
  conversionFrom: UnitConversion
}

type UnitConversion {
  id: ID!
  fromUnit: Unit
  toUnit: Unit
  factor: Float
}

type User {
  id: ID!
  userName: String!
  email: EmailAddress
  dateJoined: DateTime
  lastEdited: DateTime
  following: [Following]
  followedBy: [Follower]
  myBuild: [Build]
  allBuilds: [Build]
  buildEditedBy: [Build]
  profile: Profile
}

input UpdateUserInput {
  id: ID!
  userName: String
  email: String
}

type Following {
  id: ID!
  userName: String!
  email: EmailAddress
  dateJoined: DateTime
  lastEdited: DateTime
  relationship: Relationship
}

type Follower {
  id: ID!
  userName: String!
  email: EmailAddress
  dateJoined: DateTime
  lastEdited: DateTime
}

type StatusMessage {
  message: String
}

type FollowReturn {
  following: String
  relationship: Relationship
  status: StatusMessage
}

type UserRelation {
  id: String!
  userName: String!
  followedBy: Boolean!
  following: Boolean!
}
