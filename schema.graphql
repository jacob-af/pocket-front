type AuthPayload {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input CreateUserInput {
  userName: String!
  email: EmailAddress!
  password: String!
}

input LoginInput {
  email: EmailAddress!
  password: String!
}

type LogoutResponse {
  loggedOut: Boolean!
}

type NewTokenResponse {
  accessToken: String!
  refreshToken: String!
}

type Query {
  hello: String!
  findAllBuilds: [Build]
  findOneBuild: Build
  usersBuilds: [Build]
  ingredients: [Ingredient]!
  ingredient(id: String!): Ingredient
  recipes: [Recipe]!
  recipe(id: String!): Recipe
  allUsers: [User]!
  userById(id: ID!): User
}

type Mutation {
  login(loginInput: LoginInput!): AuthPayload!
  signup(createUserInput: CreateUserInput!): AuthPayload!
  logout(userId: ID!): LogoutResponse!
  getNewTokens(refreshToken: String): AuthPayload!
  createBuild(createBuildInput: CreateBuildInput): BuildResponse
  updateBuild(updateBuildInput: UpdateBuildInput): ArchiveResponse
  removeBuild(buildId: String, permission: Permission): BuildResponse
  changeBuildPermission(
    userId: String
    buildId: String
    userPermission: Permission
    desiredPermission: Permission
  ): BuildPermissionResponse
  deleteBuildPermission(
    userId: String
    buildId: String
    userPermission: Permission
    permission: Permission
  ): BuildPermissionResponse
  createIngredient(createIngredientInput: CreateIngredientInput!): Ingredient!
  createManyIngredients(
    createManyIngredientInputs: [CreateIngredientInput]!
  ): StatusMessage!
  updateIngredient(updateIngredientInput: UpdateIngredientInput!): Ingredient!
  removeIngredient(id: String!): Ingredient
  createManyRecipes(
    createManyRecipeInputs: [CreateRecipeInput]!
  ): StatusMessage!
  createRecipe(createRecipeInput: CreateRecipeInput!): Recipe!
  updateRecipe(updateRecipeInput: UpdateRecipeInput!): Recipe!
  removeRecipe(id: ID!): Recipe
  updateTouch(
    newTouchArray: [TouchInput]
    permission: Permission
    buildId: String
    version: Int
  ): [Touch]
  followUser(followId: String!, relationship: Relationship): StatusMessage
  unFollowUser(unfollowId: String!): StatusMessage
  blockUser(blockId: String!): StatusMessage
  unblockUser(unblockId: String!): StatusMessage
}

type Build {
  id: ID!
  recipe: Recipe!
  buildName: String!
  createdAt: DateTime
  editedAt: DateTime
  createdBy: User
  editedBy: User
  instructions: String
  notes: String
  glassware: String
  ice: String
  permission: Permission
  touch: [Touch]!
  version: Int
  archivedBuild: [ArchivedBuild]
}

type ArchivedBuild {
  id: ID!
  buildId: ID!
  buildName: String!
  createdAt: DateTime
  createdBy: User
  instructions: String
  notes: String
  glassware: String
  ice: String
  version: Int
  archivedTouch: [ArchivedTouch]
}

type BuildUser {
  user: User!
  build: Build!
  permission: Permission
}

type CompleteBuild {
  id: ID!
  buildName: String!
  createdAt: DateTime
  editedAt: DateTime
  createdBy: User
  editedBy: User
  about: String
  notes: String
  glassware: String
  ice: String
  instructions: String
  permission: Permission
  completeTouch: [CompleteTouch]
}

type BuildResponse {
  build: Build
  permission: Permission
}

type ArchiveResponse {
  build: Build
  archivedBuild: ArchivedBuild
}

type BuildPermissionResponse {
  buildUser: BuildUser
  permission: Permission
}

input CreateBuildInput {
  recipeId: ID!
  buildName: String!
  instructions: String
  glassware: String
  ice: String
  touchArray: [TouchInput]!
}

input CreateFirstBuildInput {
  buildName: String!
  instructions: String
  glassware: String
  ice: String
  touchArray: [TouchInput]!
}

input UpdateBuildInput {
  recipeId: ID!
  buildId: String!
  buildName: String
  instructions: String
  glassware: String
  ice: String
  touchArray: [TouchInput]!
  permission: Permission
}

input ChangeBuildPermissionInput {
  userId: String
  buildId: String
  userPermission: Permission
  desiredPermission: Permission
}

enum Permission {
  VIEW
  EDIT
  MANAGER
  OWNER
  BLOCKED
}

enum Relationship {
  Favorite
  Close
  Following
  Blocked
}

type Ingredient {
  id: ID!
  name: String!
  description: String!
}

input CreateIngredientInput {
  name: String!
  description: String
}

input UpdateIngredientInput {
  id: ID!
  name: String!
  description: String
}

type Recipe {
  id: ID!
  createdAt: DateTime
  editedAt: DateTime
  name: String!
  about: String
  createdBy: User
  editedBy: User
  build: [Build!]!
}

input CreateRecipeInput {
  name: String!
  about: String!
  build: CreateFirstBuildInput!
}

input UpdateRecipeInput {
  id: ID!
  name: String
  about: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress

type Touch {
  id: ID!
  build: Build
  order: Int
  amount: Float
  unit: String
  version: Int
  ingredient: Ingredient
}

type ArchivedTouch {
  id: ID!
  archivedBuild: Build
  order: Int
  amount: Float
  unit: String
  version: Int
  ingredient: Ingredient
}

input TouchInput {
  ingredientName: String
  amount: Float
  unit: String
}

type CompleteTouch {
  id: ID!
  ingredientName: String
  amount: Float
  unit: String
  cost: Float
}

type User {
  id: ID!
  userName: String!
  email: EmailAddress!
  dateJoined: DateTime
  lastEdited: DateTime
  following: [Following]
  followedBy: [Follower]
  myBuild: [Build]
  allBuilds: [Build]
  buildEditedBy: [Build]
}

input UpdateUserInput {
  id: ID!
  userName: String
  email: String
}

type Following {
  id: ID!
  userName: String!
  email: EmailAddress!
  dateJoined: DateTime
  lastEdited: DateTime
  relationship: Relationship
}

type Follower {
  id: ID!
  userName: String!
  email: EmailAddress!
  dateJoined: DateTime
  lastEdited: DateTime
}

type StatusMessage {
  message: String
}

type FollowReturn {
  following: String
  relationship: Relationship
  status: StatusMessage
}
